<%-- 
Name:
Author: 
Description: 
--%>
<%-- 1、组件引用 --%>
<%@ Template Language="C#" TargetLanguage="Text" %>
<%-- 加载访问数据库的组件SchemaExplorer,并声明其使用的命名空间 --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%-- 2、数据库配置 --%>
<%-- 数据库 --%>
<%@ Property Type="DatabaseSchema" Name="SourceDatabase" DeepLoad="True" Optional="False" Category="01. GettingStarted - Required" Description="Database that the tables views, and storedprocedures should be based on. IMPORTANT!!! If SourceTables and SourceViews areleft blank, the Entire Database will then be generated."%>

<%-- 3、注册实体模板 --%>
<%-- 注册实体层Entity模板 --%>
<%@  Register Name="EntityTemplate" Template="Entity.cst" MergeProperties="False" ExcludeProperties=""%>

<%-- 4、定义输出路径 --%>
<script runat="template">
    //解决方案输出路径
private string Directory = String.Empty;
    
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
    { 
        get
        {
            return Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length -1);
            Directory = value;
        } 
    }
</script>

<%-- 5、定义函数，将数据库架构传递给模板 --%>
<script runat="template">
    //生成实体Entity类
private void GenerateEntityClasses()
    {
        CodeTemplate Template =new EntityTemplate();
        foreach(TableSchema table in this.SourceDatabase.Tables)
        {
            string FileDirectory = OutputDirectory +"\\"+ table.Name +".cs";
            //生成模板
            Template.SetProperty("Table",table);
            //文件输出
            Template.RenderToFile(FileDirectory,true);
            Debug.WriteLine(FileDirectory +" 创建成功.");
        }
    }
</script>

<%-- 6、调用函数--%>
<%
//创建实体层Entity类
this.GenerateEntityClasses();

Debug.WriteLine("OK");
%>